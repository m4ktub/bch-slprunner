import { Slp } from "slpjs";
const BigNumber = require("bignumber.js");
const SLPSDK = require("slp-sdk");
const SLP = new SLPSDK({ restURL: "https://rest.bitcoin.com/v2/" });

const rootSeed = SLP.Mnemonic.toSeed(
  "march mimic december feature august winner sand fault sleep phone just social"
);
const masterHDNode = SLP.HDNode.fromSeed(rootSeed);
const account = SLP.HDNode.derivePath(masterHDNode, "m/44'/245'/0'");

let keyNode = SLP.HDNode.derivePath(account, "0/0");
let keyPair = SLP.HDNode.toKeyPair(keyNode);
let bchAddress = SLP.HDNode.toCashAddress(keyNode);
let slpAddress = SLP.Address.toSLPAddress(bchAddress);
let btcAddress = SLP.Address.toLegacyAddress(bchAddress);

const levels = {
  "d5efb237f43a822ede2086bbefca44f1157b7adf2ddeed87c4b294bd136d1d36": 1,
  "d8298b47d2b8beab3c200a2f5d18c4014fa883f9a831468b3fca8ec9e51a535f": 2,
  "fd83ca5cf39fc7e9a0bcdb3fc00cbdd3980a30871a1fcdd580e2e2a41caf1ab0": 3,
  "f87861d6e068a17cf3ca223a7518571c4a1109cec8fc3a51be1a56420ddf2816": 4,
  "578920b290c147911d8fb4e7f981065f3f9f344ae42a20dd056b7deb2158e484": 5,
  "1c93b5cdc6d0e064ee5f9134f3184855daf630e6e7b97c7b9391d5e775460a1a": 6,
  "0bd5d7ba772e9b2952df6e3c0d551fa1caf8db91cd51b14df5546a12bae5917b": 7,
  "848f3677b69afc0d002fcbe8ab02c8dcfb17f54ae779bd895c77de9a608b345a": 8,
  "3a904bf3a58b49ab51432230e55d230ad13cd934cc435953435160aecc3a6e9b": 9,
  "0d02b95fa0765db9eed2ed958bec4aa51391106783de3f795a0efddace2b2c50": 10,
  "da6899513788f6eda9c3bdb6865f7053884056c65e2ce9d8fb1ffd8647488adf": 11,
  "1c067b37540ae1f8eedff013f226992cf55ba390a7b4ce01c491539e77538266": 12,
  "40249b3b7540f7ec6a35e15499815b9467d4c57056b1f1e0f3b745383986c735": 13,
  "f26d9fb7cc3cab8b7f26fa4b3124f35abdb0b0250ae4e726582c14371fcab103": 14,
  "4fa4210389e70fc67d2c7bd3f442c185fbc129705d366fb0b22168dfc69b3d65": 15,
  "f9f87392c1dab30bd58652260ec80db1e7570c6b22da9b99f3ac93598904dfa0": 16,
  "f5a811ac1dd364d18dc39614d76006e502afa6d2b33b9f778045a6db756b7a65": 17,
  "02859836fdb3a12b7c8e21fb853d0b71000ead4a18138fca9d359a5fad71f186": 18,
  "6710c21e9056d7f0b6fcf95bcc5c3f98a8fff9d2792af4ad9a3ef6c348027092": 19,
  "7d7d131e30a15c3412c39b633dbc44c5e86761c507406a00bd3550318f11e3b5": 20,
  "cdebae277c8550f075fdfb8d67e58755e52f04b53ce107b5542f0434bbc873bb": 21,
  "cc4f19c0ca3ec740cb3d8c7d5d999b22f9eee3e9bea470e7d121ee10976e7dfb": 22,
  "191ed342875aae021d2fb75859ef9788b77ed1d334e5ca2a7890f175163c777e": 23,
  "947f0d3b09490475fc994ca3e9783e8ad76fd205f7968fda1e7bca4c03d67b38": 24,
  "317725f769b2de8f43705c76e25a8db319f7679aec71a7977fa2c5244fae696d": 25,
  "a357cbecf5403be65ca47b82f76ba2ece035b8db6c3b1c02286f7379ecfd6097": 26,
  "f6c832e264b17814043fb6836feb5077259ba5812cae6bf3d5a71c0173324e1f": 27,
  "f93010140241cdc06fb335af42cfc74ead7ee02671d4d1b26701d90dbe9102ad": 28,
  "b9c5441a92a4c351e9224def1f78da6618551e388eb51b342f12a90f0246926a": 29,
  "0c4040228dd1b9247423c1e19fa057307eec24b1cdcc0b239391a6eaade0d821": 30,
  "8f41465dafc11605027f876f5c6c3ff3acf3e78ab4f99ac451f0c93c8a7bc39f": 31,
  "3641fc50120b604e4020ab8930f10f687b886db4280fb94a35f25ef4b891bb49": 32,
  "0000000000000000000000000000000000000000000000000000000000000033": 33,
  "0000000000000000000000000000000000000000000000000000000000000034": 34,
  "0000000000000000000000000000000000000000000000000000000000000035": 35,
  "0000000000000000000000000000000000000000000000000000000000000036": 36,
  "0000000000000000000000000000000000000000000000000000000000000037": 37,
  "0000000000000000000000000000000000000000000000000000000000000038": 38,
  "0000000000000000000000000000000000000000000000000000000000000039": 39,
  "0000000000000000000000000000000000000000000000000000000000000040": 40,
  "0000000000000000000000000000000000000000000000000000000000000041": 41,
  "0000000000000000000000000000000000000000000000000000000000000042": 42,
  "0000000000000000000000000000000000000000000000000000000000000043": 43,
  "0000000000000000000000000000000000000000000000000000000000000044": 44,
  "0000000000000000000000000000000000000000000000000000000000000045": 45,
  "0000000000000000000000000000000000000000000000000000000000000046": 46,
  "0000000000000000000000000000000000000000000000000000000000000047": 47,
  "0000000000000000000000000000000000000000000000000000000000000048": 48,
  "0000000000000000000000000000000000000000000000000000000000000049": 49,
  "0000000000000000000000000000000000000000000000000000000000000050": 50,
  "0000000000000000000000000000000000000000000000000000000000000051": 51,
  "0000000000000000000000000000000000000000000000000000000000000052": 52,
  "0000000000000000000000000000000000000000000000000000000000000053": 53,
  "0000000000000000000000000000000000000000000000000000000000000054": 54,
  "0000000000000000000000000000000000000000000000000000000000000055": 55,
  "0000000000000000000000000000000000000000000000000000000000000056": 56,
  "0000000000000000000000000000000000000000000000000000000000000057": 57,
  "0000000000000000000000000000000000000000000000000000000000000058": 58,
  "0000000000000000000000000000000000000000000000000000000000000059": 59,
  "0000000000000000000000000000000000000000000000000000000000000060": 60,
  "0000000000000000000000000000000000000000000000000000000000000061": 61,
  "0000000000000000000000000000000000000000000000000000000000000062": 62,
  "0000000000000000000000000000000000000000000000000000000000000063": 63,
  "0000000000000000000000000000000000000000000000000000000000000064": 64,
  "0000000000000000000000000000000000000000000000000000000000000065": 65,
  "0000000000000000000000000000000000000000000000000000000000000066": 66,
  "0000000000000000000000000000000000000000000000000000000000000067": 67,
  "0000000000000000000000000000000000000000000000000000000000000068": 68,
  "0000000000000000000000000000000000000000000000000000000000000069": 69,
  "0000000000000000000000000000000000000000000000000000000000000070": 70,
  "0000000000000000000000000000000000000000000000000000000000000071": 71,
  "0000000000000000000000000000000000000000000000000000000000000072": 72,
  "0000000000000000000000000000000000000000000000000000000000000073": 73,
  "0000000000000000000000000000000000000000000000000000000000000074": 74,
  "0000000000000000000000000000000000000000000000000000000000000075": 75,
  "0000000000000000000000000000000000000000000000000000000000000076": 76,
  "0000000000000000000000000000000000000000000000000000000000000077": 77,
  "0000000000000000000000000000000000000000000000000000000000000078": 78,
  "0000000000000000000000000000000000000000000000000000000000000079": 79,
  "0000000000000000000000000000000000000000000000000000000000000080": 80,
  "0000000000000000000000000000000000000000000000000000000000000081": 81,
  "0000000000000000000000000000000000000000000000000000000000000082": 82,
  "0000000000000000000000000000000000000000000000000000000000000083": 83,
  "0000000000000000000000000000000000000000000000000000000000000084": 84,
  "0000000000000000000000000000000000000000000000000000000000000085": 85,
  "0000000000000000000000000000000000000000000000000000000000000086": 86,
  "0000000000000000000000000000000000000000000000000000000000000087": 87,
  "0000000000000000000000000000000000000000000000000000000000000088": 88,
  "0000000000000000000000000000000000000000000000000000000000000089": 89,
  "0000000000000000000000000000000000000000000000000000000000000090": 90,
  "0000000000000000000000000000000000000000000000000000000000000091": 91,
  "0000000000000000000000000000000000000000000000000000000000000092": 92,
  "0000000000000000000000000000000000000000000000000000000000000093": 93,
  "0000000000000000000000000000000000000000000000000000000000000094": 94,
  "0000000000000000000000000000000000000000000000000000000000000095": 95,
  "0000000000000000000000000000000000000000000000000000000000000096": 96,
  "0000000000000000000000000000000000000000000000000000000000000097": 97,
  "0000000000000000000000000000000000000000000000000000000000000098": 98,
  "0000000000000000000000000000000000000000000000000000000000000099": 99,
  "0000000000000000000000000000000000000000000000000000000000000100": 100,
  "0000000000000000000000000000000000000000000000000000000000000101": 101,
  "0000000000000000000000000000000000000000000000000000000000000102": 102,
  "0000000000000000000000000000000000000000000000000000000000000103": 103,
  "0000000000000000000000000000000000000000000000000000000000000104": 104,
  "0000000000000000000000000000000000000000000000000000000000000105": 105,
  "0000000000000000000000000000000000000000000000000000000000000106": 106,
  "0000000000000000000000000000000000000000000000000000000000000107": 107,
  "0000000000000000000000000000000000000000000000000000000000000108": 108,
  "0000000000000000000000000000000000000000000000000000000000000109": 109,
  "0000000000000000000000000000000000000000000000000000000000000110": 110,
  "0000000000000000000000000000000000000000000000000000000000000111": 111,
  "0000000000000000000000000000000000000000000000000000000000000112": 112,
  "0000000000000000000000000000000000000000000000000000000000000113": 113,
  "0000000000000000000000000000000000000000000000000000000000000114": 114,
  "0000000000000000000000000000000000000000000000000000000000000115": 115,
  "0000000000000000000000000000000000000000000000000000000000000116": 116,
  "0000000000000000000000000000000000000000000000000000000000000117": 117,
  "0000000000000000000000000000000000000000000000000000000000000118": 118,
  "0000000000000000000000000000000000000000000000000000000000000119": 119,
  "0000000000000000000000000000000000000000000000000000000000000120": 120,
  "0000000000000000000000000000000000000000000000000000000000000121": 121,
  "0000000000000000000000000000000000000000000000000000000000000122": 122,
  "0000000000000000000000000000000000000000000000000000000000000123": 123,
  "0000000000000000000000000000000000000000000000000000000000000124": 124,
  "0000000000000000000000000000000000000000000000000000000000000125": 125,
  "0000000000000000000000000000000000000000000000000000000000000126": 126,
  "0000000000000000000000000000000000000000000000000000000000000127": 127,
  "0000000000000000000000000000000000000000000000000000000000000128": 128,
  "0000000000000000000000000000000000000000000000000000000000000129": 129,
  "0000000000000000000000000000000000000000000000000000000000000130": 130,
  "0000000000000000000000000000000000000000000000000000000000000131": 131,
  "0000000000000000000000000000000000000000000000000000000000000132": 132,
  "0000000000000000000000000000000000000000000000000000000000000133": 133,
  "0000000000000000000000000000000000000000000000000000000000000134": 134,
  "0000000000000000000000000000000000000000000000000000000000000135": 135,
  "0000000000000000000000000000000000000000000000000000000000000136": 136,
  "0000000000000000000000000000000000000000000000000000000000000137": 137,
  "0000000000000000000000000000000000000000000000000000000000000138": 138,
  "0000000000000000000000000000000000000000000000000000000000000139": 139,
  "0000000000000000000000000000000000000000000000000000000000000140": 140,
  "0000000000000000000000000000000000000000000000000000000000000141": 141,
  "0000000000000000000000000000000000000000000000000000000000000142": 142,
  "0000000000000000000000000000000000000000000000000000000000000143": 143,
  "0000000000000000000000000000000000000000000000000000000000000144": 144,
  "0000000000000000000000000000000000000000000000000000000000000145": 145,
  "0000000000000000000000000000000000000000000000000000000000000146": 146,
  "0000000000000000000000000000000000000000000000000000000000000147": 147,
  "0000000000000000000000000000000000000000000000000000000000000148": 148,
  "0000000000000000000000000000000000000000000000000000000000000149": 149,
  "0000000000000000000000000000000000000000000000000000000000000150": 150
};

function timeout(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function getTxDetailsWithRetry(txid, times, interval) {
  let attempts = times;
  do {
    attempts--;

    try {
      return await SLP.Transaction.details(txid);
    } catch (error) {
      if (attempts > 0) {
        console.log(error);
        await timeout(interval);
      } else {
        throw error;
      }
    }
  } while (attempts > 0);
}

async function getAddressBalancesWithRetry(slpAddress, times, interval) {
  let attempts = times;
  do {
    attempts--;

    let balances = await SLP.Utils.balancesForAddress(slpAddress);
    if (balances.length) {
      return balances;
    } else if (attempts > 0) {
      await timeout(interval);
    }
  } while (attempts > 0);
}

async function burn(txid, vout, satoshis, callback) {
  // sanity checks to avoid burning whale money
  if (satoshis > 546) {
    console.log(`transaction ${txid} deposited more than 546 sats`);
    return;
  }

  // balance check
  // [{"tokenId":"0d02b95fa0765db9eed2ed958bec4aa51391106783de3f795a0efddace2b2c50","balance":"1","decimalCount":0}]
  let balances = await getAddressBalancesWithRetry(slpAddress, 30, 1000);
  if (!balances.length) {
    console.log(`transaction ${txid} deposited no tokens`);
    return;
  }

  let tokenId = balances[0].tokenId;
  let tokenBalance = balances.reduce((acc, v) => acc + parseInt(v.balance), 0);
  let tokenLevel = levels[tokenId];

  if (!tokenLevel) {
    console.log(`transaction ${txid} does not contain a LVL token`);
    return;
  }

  if (tokenBalance == 0) {
    console.log(`transaction ${txid} tried to trick me with a 0 balance`);
    return;
  }

  // build transaction
  let txBuilder = new SLP.TransactionBuilder();
  txBuilder.addInput(txid, vout);

  let burnData = SLP.Script.encode([
    SLP.Script.opcodes.OP_RETURN,
    new Buffer("Puff! There goes the token.")
  ]);
  txBuilder.addOutput(burnData, 0);

  let redeemScript;
  txBuilder.sign(
    0,
    keyPair,
    redeemScript,
    txBuilder.hashTypes.SIGHASH_ALL,
    satoshis
  );

  let newTx = txBuilder.build();
  let newTxHex = newTx.toHex();
  let newTxId = await SLP.RawTransactions.sendRawTransaction([newTxHex]);
  console.log(`Burn Tx ID: ${newTxId}`);

  // invoke callback
  callback(tokenLevel, tokenBalance);
}

async function sendBackToken(txid, level, callback) {
  try {
    // get transaction details and matching output
    let userTx = await getTxDetailsWithRetry(txid, 30, 1000);
    let userOut = userTx.vout
      .filter(o => o.scriptPubKey.addresses)
      .find(o => o.scriptPubKey.addresses.indexOf(btcAddress) >= 0);

    if (!userOut) {
      callback("error: no valid output", null);
      return;
    }

    // check funding balance
    let satoshis = Math.trunc(parseFloat(userOut.value) * 100000000);
    if (satoshis < 1000) {
      callback("error: not enough satoshis to cover expenses", null);
      return;
    }

    // guess input user address
    let userAddress = userTx.vin[0].cashAddress;

    // get token id for level
    let tokenId = Object.keys(levels).find(tokenId => levels[tokenId] == level);
    if (!tokenId) {
      callback("error: could not find token id for level " + level, null);
      return;
    }

    // get minting baton address for the level
    let batonNode = SLP.HDNode.derivePath(account, "1/" + level);
    let batonPair = SLP.HDNode.toKeyPair(batonNode);
    let batonBchAddress = SLP.HDNode.toCashAddress(batonNode);

    // get baton output
    let batonUtxos = await SLP.Address.utxo(batonBchAddress);
    let batonOut = batonUtxos.utxos.find(utxo => utxo.satoshis == 546);

    // build transaction
    let slp = new Slp(SLP);
    let mintOpReturn = slp.buildMintOpReturn({
      tokenIdHex: tokenId,
      mintQuantity: new BigNumber(1),
      batonVout: 2
    });

    let txBuilder = new SLP.TransactionBuilder();
    txBuilder.addInput(userTx.txid, userOut.n);
    txBuilder.addInput(batonOut.txid, batonOut.vout);
    txBuilder.addOutput(mintOpReturn, 0);
    txBuilder.addOutput(userAddress, 546);
    txBuilder.addOutput(batonBchAddress, 546);

    const SIGHASH_ALL = txBuilder.hashTypes.SIGHASH_ALL;

    let redeemScript;
    txBuilder.sign(0, keyPair, redeemScript, SIGHASH_ALL, satoshis);
    txBuilder.sign(1, batonPair, redeemScript, SIGHASH_ALL, 546);

    // send transaction
    let newTx = txBuilder.build();
    let newTxHex = newTx.toHex();
    let newTxId = await SLP.RawTransactions.sendRawTransaction([newTxHex]);
    console.log(`Mint Tx ID: ${newTxId}`);

    // result
    callback(null, newTxId);
  } catch (error) {
    callback(error, null);
  }
}

export default {
  SLP,
  bchAddress,
  slpAddress,
  btcAddress,
  levels,
  burn,
  sendBackToken
};
